# addresses = paste0(addresses, ", Ireland")
infile = "input"
countries = unlist(strsplit(toString(unique(Kivaclean$country)), ', '))
countries[1:5]
addresses =  countries #c("Etna, Sicily, Italy", "   ", "200 West 5th Avenue, New York City, NY")
test = head(AddressSearches,5)
#addresses = AddressSearches$address
#define a function that will process googles server responses for us.
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
print (answer)
print (class(answer))
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 5 seconds at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(5)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
print("Found temp file - resuming from index:")
geocoded <- readRDS(tempfilename)
startindex <- nrow(geocoded)
print(startindex)
}
# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
saveRDS(geocoded, tempfilename)
}
#now we add the latitude and longitude to the main data
data$lat <- geocoded$lat
data$long <- geocoded$long
data$accuracy <- geocoded$accuracy
countrygeocode = geocoded[4:,]
country
write.csv(countrygeocode, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/countrygeocode.csv')
#finally write it all to the output files
# infile = "wineGeoCodes"
# saveRDS(data, paste0(infile ,"_geocoded.rds"))
# write.table(data, file=paste0(infile ,"_geocoded.csv"), sep=",", row.names=FALSE)
View(countrygeocode)
# Geocoding script for large list of addresses.
# Shane Lynn 10/10/2013
#load up the ggmap library
library(ggmap)
# get the input data
# infile <- "input"
# data <- read.csv(paste0('./', infile, '.csv'))
#
# # get the address list, and append "Ireland" to the end to increase accuracy
# # (change or remove this if your address already include a country etc.)
# addresses = data$Address
# addresses = paste0(addresses, ", Ireland")
infile = "input"
countries = unlist(strsplit(toString(unique(Kivaclean$country)), ', '))
countries[1:5]
addresses =  countries #c("Etna, Sicily, Italy", "   ", "200 West 5th Avenue, New York City, NY")
test = head(AddressSearches,5)
#addresses = AddressSearches$address
#define a function that will process googles server responses for us.
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
print (answer)
print (class(answer))
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 5 seconds at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(5)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
print("Found temp file - resuming from index:")
geocoded <- readRDS(tempfilename)
startindex <- nrow(geocoded)
print(startindex)
}
# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
saveRDS(geocoded, tempfilename)
}
#now we add the latitude and longitude to the main data
data$lat <- geocoded$lat
data$long <- geocoded$long
data$accuracy <- geocoded$accuracy
#countrygeocode = geocoded[4:,]
#write.csv(countrygeocode, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/countrygeocode.csv')
#finally write it all to the output files
# infile = "wineGeoCodes"
# saveRDS(data, paste0(infile ,"_geocoded.rds"))
# write.table(data, file=paste0(infile ,"_geocoded.csv"), sep=",", row.names=FALSE)
View(countrygeocode)
View(geocoded)
countrygeocode = geocoded[4:88,]
write.csv(countrygeocode, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/countrygeocode.csv')
View(kiva_compliled)
# Number of Repeat Borrowers
countReborrow = kiva_compliled %>%
group_by(country) %>%
filter(tags%like% "#Repeat Borrower") %>%
summarise(countReborrow = n())
View(countReborrow)
View(countReborrow)
View(reborrow_by_country)
View(reborrow_by_country)
reborrow_by_country = arrange(funds_by_country, -funds_by_country$reborrow_ratio) %>%
group_by(., country)
View(reborrow_by_country)
View(kiva_geompi)
View(kiva_geompi)
runApp()
runApp()
library(shinyGlobe)
runApp()
runApp()
View(kiva_geompi)
#create Kiva Loans Datasets and merge
kiva_loans = fread('kiva_loans.csv', nrows = -1, header = T, stringsAsFactors = TRUE)
# Sum of loans, count of borrowers by country
funds_by_countrypart1 = kiva_loans %>% group_by(., country) %>%
summarise(.,funded_total = sum(funded_amount),loan_total = sum(loan_amount), countTotalBorrow = n()) %>%
arrange(., -funded_total)
funds_by_country
# Number of Repeat Borrowers
countReborrow = kiva_loans %>%
group_by(country) %>%
filter(tags%like% "#Repeat Borrower") %>%
summarise(countReborrow = n())
#Joined tables with Repeat Borrower Ratio
funds_by_country = left_join(funds_by_countrypart1, countReborrow, by = c("country" = "country"))
funds_by_country$reborrow_ratio = funds_by_country$countReborrow/funds_by_country$countTotalBorrow*100
reborrow_by_country = arrange(funds_by_country, -funds_by_country$reborrow_ratio) %>%
group_by(., country)
funds_by_countrypart1
#Joined tables with Repeat Borrower Ratio
funds_by_country = left_join(funds_by_countrypart1, countReborrow, by = c("country" = "country"))
funds_by_country$reborrow_ratio = funds_by_country$countReborrow/funds_by_country$countTotalBorrow*100
reborrow_by_country = arrange(funds_by_country, -funds_by_country$reborrow_ratio) %>%
group_by(., country)
funds_by_country
write.csv(funds_by_country, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/Kivi_clean.csv')
loansummpi = ggplot(data = funds_by_country, aes(x = country, y= loan_total)) + geom_bar(stat = 'identity')
loansummpi
mpi = fread('mpi.csv', nrows = -1, header = T, stringsAsFactors = TRUE)
geoloc = fread('countrygeocoderefined.csv', nrows = -1, header = T, stringsAsFactors = TRUE)
head(mpi, 5)
head(geoloc, 5)
mpi = fread('mpi.csv', nrows = -1, header = T, stringsAsFactors = TRUE)
geoloc = fread('countrygeocoderefined.csv', nrows = -1, header = T, stringsAsFactors = TRUE)
head(geoloc, 5)
Kivafullyclean = inner_join(funds_by_country,mpi, by='country')
kivafullyclean = inner_join(funds_by_country,mpi, by='country')
kivafullyclean
View(kivafullyclean)
kivafullyclean = left_join(funds_by_country,mpi, by='country')
kivafullyclean
kivafullyclean = left_join(kivafullyclean, geoloc, by= country)
kivafullyclean = left_join(kivafullyclean, geoloc, by= 'country')
countries = unlist(strsplit(toString(unique(funds_by_country$country)), ', '))
countries[1:5]
countries
kivafullyclean = left_join(funds_by_country,mpi, by='country')
View(kivafullyclean)
kivafullyclean = left_join(kivafullyclean, geoloc, by= 'country')
funds_by_country
unique(funds_by_country)
View(funds_by_country)
View(funds_by_country)
nrows(unique(funds_by_country))
# Geocoding script for large list of addresses.
# Shane Lynn 10/10/2013
#load up the ggmap library
library(ggmap)
# get the input data
# infile <- "input"
# data <- read.csv(paste0('./', infile, '.csv'))
#
# # get the address list, and append "Ireland" to the end to increase accuracy
# # (change or remove this if your address already include a country etc.)
# addresses = data$Address
# addresses = paste0(addresses, ", Ireland")
infile = "input"
countries = unlist(strsplit(toString(unique(funds_by_country$country)), ', '))
countries
addresses =  countries #c("Etna, Sicily, Italy", "   ", "200 West 5th Avenue, New York City, NY")
test = head(AddressSearches,5)
#addresses = AddressSearches$address
#define a function that will process googles server responses for us.
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
print (answer)
print (class(answer))
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 5 seconds at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(5)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
print("Found temp file - resuming from index:")
geocoded <- readRDS(tempfilename)
startindex <- nrow(geocoded)
print(startindex)
}
# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
saveRDS(geocoded, tempfilename)
}
#now we add the latitude and longitude to the main data
data$lat <- geocoded$lat
data$long <- geocoded$long
data$accuracy <- geocoded$accuracy
countrygeocode = geocoded[4:88,]
write.csv(countrygeocode, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/countrygeocode.csv')
#finally write it all to the output files
# infile = "wineGeoCodes"
# saveRDS(data, paste0(infile ,"_geocoded.rds"))
# write.table(data, file=paste0(infile ,"_geocoded.csv"), sep=",", row.names=FALSE)
View(countrygeocode)
# Geocoding script for large list of addresses.
# Shane Lynn 10/10/2013
#load up the ggmap library
library(ggmap)
# get the input data
# infile <- "input"
# data <- read.csv(paste0('./', infile, '.csv'))
#
# # get the address list, and append "Ireland" to the end to increase accuracy
# # (change or remove this if your address already include a country etc.)
# addresses = data$Address
# addresses = paste0(addresses, ", Ireland")
infile = "input"
countries = unlist(strsplit(toString(unique(funds_by_country$country)), ', '))
countries
addresses =  countries #c("Etna, Sicily, Italy", "   ", "200 West 5th Avenue, New York City, NY")
test = head(AddressSearches,5)
#addresses = AddressSearches$address
#define a function that will process googles server responses for us.
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
print (answer)
print (class(answer))
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 5 seconds at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(5)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
print("Found temp file - resuming from index:")
geocoded <- readRDS(tempfilename)
startindex <- nrow(geocoded)
print(startindex)
}
# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
saveRDS(geocoded, tempfilename)
}
#now we add the latitude and longitude to the main data
data$lat <- geocoded$lat
data$long <- geocoded$long
data$accuracy <- geocoded$accuracy
countrygeocode = geocoded
write.csv(countrygeocode, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/countrygeocode.csv')
#finally write it all to the output files
# infile = "wineGeoCodes"
# saveRDS(data, paste0(infile ,"_geocoded.rds"))
# write.table(data, file=paste0(infile ,"_geocoded.csv"), sep=",", row.names=FALSE)
View(countrygeocode)
# Geocoding script for large list of addresses.
# Shane Lynn 10/10/2013
#load up the ggmap library
library(ggmap)
# get the input data
# infile <- "input"
# data <- read.csv(paste0('./', infile, '.csv'))
#
# # get the address list, and append "Ireland" to the end to increase accuracy
# # (change or remove this if your address already include a country etc.)
# addresses = data$Address
# addresses = paste0(addresses, ", Ireland")
infile = "input"
countries = unlist(strsplit(toString((funds_by_country$country)), ', '))
countries
addresses =  countries #c("Etna, Sicily, Italy", "   ", "200 West 5th Avenue, New York City, NY")
test = head(AddressSearches,5)
#addresses = AddressSearches$address
#define a function that will process googles server responses for us.
getGeoDetails <- function(address){
#use the gecode function to query google servers
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
#now extract the bits that we need from the returned list
answer <- data.frame(lat=NA, long=NA, accuracy=NA, formatted_address=NA, address_type=NA, status=NA)
answer$status <- geo_reply$status
print (answer)
print (class(answer))
#if we are over the query limit - want to pause for an hour
while(geo_reply$status == "OVER_QUERY_LIMIT"){
print("OVER QUERY LIMIT - Pausing for 5 seconds at:")
time <- Sys.time()
print(as.character(time))
Sys.sleep(5)
geo_reply = geocode(address, output='all', messaging=TRUE, override_limit=TRUE)
answer$status <- geo_reply$status
}
#return Na's if we didn't get a match:
if (geo_reply$status != "OK"){
return(answer)
}
#else, extract what we need from the Google server reply into a dataframe:
answer$lat <- geo_reply$results[[1]]$geometry$location$lat
answer$long <- geo_reply$results[[1]]$geometry$location$lng
if (length(geo_reply$results[[1]]$types) > 0){
answer$accuracy <- geo_reply$results[[1]]$types[[1]]
}
answer$address_type <- paste(geo_reply$results[[1]]$types, collapse=',')
answer$formatted_address <- geo_reply$results[[1]]$formatted_address
return(answer)
}
#initialise a dataframe to hold the results
geocoded <- data.frame()
# find out where to start in the address list (if the script was interrupted before):
startindex <- 1
#if a temp file exists - load it up and count the rows!
tempfilename <- paste0(infile, '_temp_geocoded.rds')
if (file.exists(tempfilename)){
print("Found temp file - resuming from index:")
geocoded <- readRDS(tempfilename)
startindex <- nrow(geocoded)
print(startindex)
}
# Start the geocoding process - address by address. geocode() function takes care of query speed limit.
for (ii in seq(startindex, length(addresses))){
print(paste("Working on index", ii, "of", length(addresses)))
#query the google geocoder - this will pause here if we are over the limit.
result = getGeoDetails(addresses[ii])
print(result$status)
result$index <- ii
#append the answer to the results file.
geocoded <- rbind(geocoded, result)
#save temporary results as we are going along
saveRDS(geocoded, tempfilename)
}
#now we add the latitude and longitude to the main data
data$lat <- geocoded$lat
data$long <- geocoded$long
data$accuracy <- geocoded$accuracy
countrygeocode = geocoded
write.csv(countrygeocode, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/countrygeocode.csv')
#finally write it all to the output files
# infile = "wineGeoCodes"
# saveRDS(data, paste0(infile ,"_geocoded.rds"))
# write.table(data, file=paste0(infile ,"_geocoded.csv"), sep=",", row.names=FALSE)
runApp()
write.csv(kivafullyclean, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/Kivifullyclean.csv')
write.csv(kivafullyclean, file = '~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/Kivafullyclean.csv')
Kivaclean = fread('~/Desktop/NYCDSA/R/Shiny_App_Project/data-science-for-good-kiva-crowdfunding/Kivafullyclean.csv', drop = 'V1')
runApp()
runApp()
View(Kivaclean)
kivaglob = (Kivaclean$lat, Kivaclean$long, Kivaclean$MPI)
kivaglob = unique(Kivaclean$lat, Kivaclean$long, Kivaclean$MPI)
head(kivaglob,5)
Kivaclean.names
Kivaclean.names()
names(Kivaclean)
Kivaclean[,c('lat','lon','MPI')]
Kivaclean[,c('lat','long','MPI')]
kivaglob = Kivaclean[,c('lat','long','MPI')]
runApp()
unique(kiva_loans$country)
unique(funds_by_countrypart1$country)
unique(funds_by_country$country)
View(kivafullyclean)
